{
  "address": "0x3619DbE27d7c1e7E91aA738697Ae7Bc5FC3eACA5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IStakedToken",
          "name": "psm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "extraPsmReward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emission",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AssetIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ditributionEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributionDuration",
          "type": "uint256"
        }
      ],
      "name": "DistributionEndUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "PendingAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "RewardsClaimedOnBehalf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RewardsVaultUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdming",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "RoleClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "UserIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTRA_PSM_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PSM",
      "outputs": [
        {
          "internalType": "contract IStakedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "allowClaimOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "emissionPerSecond",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastUpdateTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "claimRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "emissionPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            }
          ],
          "internalType": "struct DistributionTypes.AssetConfigInput[]",
          "name": "assetsConfigInput",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distributionDuration",
          "type": "uint256"
        }
      ],
      "name": "extendDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllowedToClaimOnBehalf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserUnclaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userBalance",
          "type": "uint256"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "distributionDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "setRewardsVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x799031ed5da5ef6ddb09976b1014b3be933e6dfaee8caed55dbe8bc1109d3398",
  "receipt": {
    "to": null,
    "from": "0xc783df8a850f42e7F7e57013759C285caa701eB6",
    "contractAddress": "0x3619DbE27d7c1e7E91aA738697Ae7Bc5FC3eACA5",
    "transactionIndex": 0,
    "gasUsed": "2782745",
    "logsBloom": "0x
    "blockHash": "0x874a5b31a22856c2429a8b34b065f0ed255e61fef376c5de68bb4809c8675aa3",
    "transactionHash": "0x799031ed5da5ef6ddb09976b1014b3be933e6dfaee8caed55dbe8bc1109d3398",
    "logs": [],
    "blockNumber": 12012082,
    "cumulativeGasUsed": "2782745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9",
    "0x4da27a545c0c5B758a6BA100e3a049001de870f5",
    "0",
    "0xee56e2b3d491590b5b31738cc34d5232f378a8d5"
  ],
  "solcInputHash": "0eb9fb9594bb179fb9fcf8f1bfa738a0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IStakedToken\",\"name\":\"psm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraPsmReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ditributionEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributionDuration\",\"type\":\"uint256\"}],\"name\":\"DistributionEndUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"PendingAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"RewardsClaimedOnBehalf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RewardsVaultUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdming\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"RoleClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTRA_PSM_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSM\",\"outputs\":[{\"internalType\":\"contract IStakedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"allowClaimOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"claimRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionDuration\",\"type\":\"uint256\"}],\"name\":\"extendDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllowedToClaimOnBehalf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"setRewardsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"DISTRIBUTION_END()\":{\"details\":\"Keeps interface compatibility. Returns the timestamp of the end of the current distribution\",\"returns\":{\"_0\":\"uint256 unix timestamp*\"}},\"claimRewards(address[],uint256,address)\":{\"details\":\"Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"to\":\"Address that will be receiving the rewards\"},\"returns\":{\"_0\":\"Rewards claimed*\"}},\"claimRewardsOnBehalf(address[],uint256,address,address)\":{\"details\":\"Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"amount\":\"Amount of rewards to claim\",\"from\":\"Address to check and claim rewards\",\"to\":\"Address that will be receiving the rewards\"},\"returns\":{\"_0\":\"Rewards claimed*\"}},\"claimRoleAdmin(uint256)\":{\"details\":\"allows the caller to become a specific role admin\",\"params\":{\"role\":\"the role associated with the admin claiming the new role*\"}},\"configureAssets((uint128,uint256,address)[])\":{\"details\":\"Configures the distribution of rewards for a list of assets\",\"params\":{\"assetsConfigInput\":\"The list of configurations to apply*\"}},\"extendDistribution(uint256)\":{\"details\":\"Extends the end of the distribution in regards of current timestamp.\",\"params\":{\"distributionDuration\":\"The timestamp duration of the new distribution*\"}},\"getAdmin(uint256)\":{\"details\":\"returns the admin associated with the specific role\",\"params\":{\"role\":\"the role associated with the admin being returned*\"}},\"getDistributionEnd()\":{\"details\":\"Returns the timestamp of the end of the current distribution\",\"returns\":{\"_0\":\"uint256 unix timestamp*\"}},\"getPendingAdmin(uint256)\":{\"details\":\"returns the pending admin associated with the specific role\",\"params\":{\"role\":\"the role associated with the pending admin being returned*\"}},\"getRewardsBalance(address[],address)\":{\"details\":\"Returns the total of rewards of an user, already accrued + not yet accrued\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The rewards*\"}},\"getRewardsVault()\":{\"details\":\"returns the current rewards vault contract\",\"returns\":{\"_0\":\"address\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}},\"getUserUnclaimedRewards(address)\":{\"details\":\"returns the unclaimed rewards of the user\",\"params\":{\"_user\":\"the address of the user\"},\"returns\":{\"_0\":\"the unclaimed user rewards\"}},\"handleAction(address,uint256,uint256)\":{\"details\":\"Called by the corresponding asset on any update that affects the rewards distribution\",\"params\":{\"totalSupply\":\"The total supply of the asset in the lending pool\",\"user\":\"The address of the user\",\"userBalance\":\"The balance of the user of the asset in the lending pool*\"}},\"initialize(address,uint256,address)\":{\"details\":\"Initialize AaveIncentivesController\",\"params\":{\"distributionDuration\":\"unix timestamp of the duration of the distribution\",\"rewardsAdmin\":\"address of the admin that controls the rewards vault and extending the distribution*\",\"rewardsVault\":\"rewards vault to pull funds\"}},\"setPendingAdmin(uint256,address)\":{\"details\":\"sets the pending admin for a specific role\",\"params\":{\"newPendingAdmin\":\"the address of the new pending admin*\",\"role\":\"the role associated with the new pending admin being set\"}},\"setRewardsVault(address)\":{\"details\":\"update the rewards vault address, only allowed by the Rewards admin\",\"params\":{\"rewardsVault\":\"The address of the rewards vault*\"}}},\"title\":\"AaveIncentivesController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Distributor contract for rewards to the Aave protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/incentives/AaveIncentivesController.sol\":\"AaveIncentivesController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/aave-stake/contracts/interfaces/IAToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\ninterface IAToken {\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x64993d89a554de11df2d9a2b9e5c01ff70b1c510f4282c3e3b6beac7f4bd2105\"},\"@aave/aave-stake/contracts/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\",\"keccak256\":\"0xb9f57138a1840eea2b01e686f7fcfc296a631ba602c9404b70752ecb8f86f8db\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x150506e2e40dc3cea841fe0ade6021b9b0d4e09f7616d312bc7c1300a2d7a94f\",\"license\":\"MIT\"},\"@aave/aave-stake/contracts/interfaces/IStakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IStakedToken {\\n  \\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x96309403461031e5b796bcd97cd504fdaa60487360abb795a51171dbcec596a2\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/lib/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\",\"keccak256\":\"0x8d71c65f5244916694428b5943f58d80250576666e8067eb4914aa2794f17aaa\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0xf32a71745588178f5f64b96e7766589e48d5402c4679b3c04085760f9437f00b\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/stake/AaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 internal immutable _oldDistributionEnd;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    _oldDistributionEnd = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= _getDistributionEnd()\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > _getDistributionEnd() ? _getDistributionEnd() : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp of the end of the current distribution\\n   * @notice This field remains virtual to extend at AaveDistributionManageV2, keeping V1 logic\\n   * @return uint256 unix timestamp\\n   **/\\n  function _getDistributionEnd() internal view virtual returns (uint256) {\\n    return _oldDistributionEnd;\\n  }\\n\\n  /**\\n   * @dev Keeps interface compatibility. Returns the timestamp of the end of the current distribution\\n   * @return uint256 unix timestamp\\n   **/\\n  function DISTRIBUTION_END() external view returns (uint256) {\\n    return _getDistributionEnd();\\n  }\\n}\\n\",\"keccak256\":\"0xd28ae4c8501fe62003febfad7453edd932c07dbd5fdf2b769bea2e136a684206\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/stake/AaveDistributionManagerV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\n\\n/**\\n * @title AaveDistributionManagerV2\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManagerV2 is AaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  uint256 internal _distributionEnd;\\n\\n  event DistributionEndUpdate(uint256 ditributionEnd, uint256 distributionDuration);\\n\\n  constructor(address emissionManager) AaveDistributionManager(emissionManager, 0) {}\\n\\n  /**\\n   * @dev Returns the timestamp of the end of the current distribution\\n   * @return uint256 unix timestamp\\n   **/\\n  function getDistributionEnd() external view returns (uint256) {\\n    return _getDistributionEnd();\\n  }\\n\\n  /**\\n   * @dev Extends the end of the distribution in regards of current timestamp.\\n   * @param distributionDuration The unix timestamp duration of the new distribution\\n   **/\\n  function _extendDistribution(uint256 distributionDuration) internal {\\n    _distributionEnd = block.timestamp.add(distributionDuration);\\n    emit DistributionEndUpdate(_distributionEnd, distributionDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp of the end of the current distribution\\n   * @return uint256 unix timestamp\\n   **/\\n  function _getDistributionEnd() internal view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n}\\n\",\"keccak256\":\"0xdee8b1777867c8c1ae4d893ceb21e706cc6de2cf72d64e3c74ae7e7b0182d20a\",\"license\":\"agpl-3.0\"},\"@aave/aave-stake/contracts/utils/RoleManager.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n/**\\n * @title RoleManager\\n * @notice Generic role manager to manage slashing and cooldown admin in StakedAaveV3.\\n *         It implements a claim admin role pattern to safely migrate between different admin addresses\\n * @author Aave\\n **/\\ncontract RoleManager {\\n  mapping(uint256 => address) private _admins;\\n  mapping(uint256 => address) private _pendingAdmins;\\n\\n  event PendingAdminChanged(address indexed newPendingAdmin);\\n  event RoleClaimed(address indexed newAdming, uint256 role);\\n\\n  modifier onlyRoleAdmin(uint256 role) {\\n    require(_admins[role] == msg.sender, 'CALLER_NOT_ROLE_ADMIN');\\n    _;\\n  }\\n\\n  modifier onlyPendingRoleAdmin(uint256 role) {\\n    require(_pendingAdmins[role] == msg.sender, 'CALLER_NOT_PENDING_ROLE_ADMIN');\\n    _;\\n  }\\n\\n  /**\\n  * @dev returns the admin associated with the specific role\\n  * @param role the role associated with the admin being returned\\n  **/\\n  function getAdmin(uint256 role) public view returns (address) {\\n    return _admins[role];\\n  }\\n\\n  /**\\n  * @dev returns the pending admin associated with the specific role\\n  * @param role the role associated with the pending admin being returned\\n  **/\\n  function getPendingAdmin(uint256 role) public view returns (address) {\\n    return _pendingAdmins[role];\\n  }\\n\\n  /**\\n  * @dev sets the pending admin for a specific role\\n  * @param role the role associated with the new pending admin being set\\n  * @param newPendingAdmin the address of the new pending admin\\n  **/\\n  function setPendingAdmin(uint256 role, address newPendingAdmin) public onlyRoleAdmin(role) {\\n    _pendingAdmins[role] = newPendingAdmin;\\n    emit PendingAdminChanged(newPendingAdmin);\\n  }\\n\\n  /**\\n  * @dev allows the caller to become a specific role admin\\n  * @param role the role associated with the admin claiming the new role\\n  **/\\n  function claimRoleAdmin(uint256 role) external onlyPendingRoleAdmin(role) {\\n    _admins[role] = msg.sender;\\n    emit RoleClaimed(msg.sender, role);\\n  }\\n\\n  function _initAdmins(uint256[] memory roles, address[] memory admins) internal {\\n    require(roles.length == admins.length, 'INCONSISTENT_INITIALIZATION');\\n\\n    for (uint256 i = 0; i < roles.length; i++) {\\n      require(_admins[i] == address(0), 'ADMIN_ALREADY_INITIALIZED');\\n      _admins[roles[i]] = admins[i];\\n      emit RoleClaimed(admins[i], roles[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4676638ec21ba48d5ce46e35a7d4cd2c06c15bb43526fb4c2534a76a4d2c9cce\"},\"@aave/aave-stake/contracts/utils/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xedfec4c491ad24c0a1024fc801c22f2a16d1f316f2a5cdcc883e0bbc451cffc7\",\"license\":\"agpl-3.0\"},\"contracts/incentives/AaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '@aave/aave-stake/contracts/lib/DistributionTypes.sol';\\nimport {SafeMath} from '@aave/aave-stake/contracts/lib/SafeMath.sol';\\n\\nimport {IERC20} from '@aave/aave-stake/contracts/interfaces/IERC20.sol';\\nimport {IAToken} from '@aave/aave-stake/contracts/interfaces/IAToken.sol';\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\nimport {IStakedToken} from '@aave/aave-stake/contracts/interfaces/IStakedToken.sol';\\nimport {VersionedInitializable} from '@aave/aave-stake/contracts/utils/VersionedInitializable.sol';\\nimport {\\n  AaveDistributionManagerV2\\n} from '@aave/aave-stake/contracts/stake/AaveDistributionManagerV2.sol';\\nimport {RoleManager} from '@aave/aave-stake/contracts/utils/RoleManager.sol';\\n\\n/**\\n * @title AaveIncentivesController\\n * @notice Distributor contract for rewards to the Aave protocol\\n * @author Aave\\n **/\\ncontract AaveIncentivesController is\\n  IAaveIncentivesController,\\n  VersionedInitializable,\\n  AaveDistributionManagerV2,\\n  RoleManager\\n{\\n  using SafeMath for uint256;\\n  uint256 public constant REVISION = 1;\\n\\n  IStakedToken public immutable PSM;\\n\\n  IERC20 public immutable REWARD_TOKEN;\\n  address internal _rewardsVault;\\n  uint256 public immutable EXTRA_PSM_REWARD;\\n\\n  mapping(address => uint256) internal _usersUnclaimedRewards;\\n\\n  uint256 constant REWARDS_ADMIN_ROLE = 4;\\n\\n  mapping(address => address) internal _allowClaimOnBehalf;\\n\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n  event RewardsVaultUpdate(address indexed vault);\\n  event RewardsClaimedOnBehalf(address indexed user, address indexed claimer);\\n\\n  modifier onlyRewardsAdmin {\\n    require(msg.sender == getAdmin(REWARDS_ADMIN_ROLE), 'CALLER_NOT_REWARDS_ADMIN');\\n    _;\\n  }\\n\\n  function _onBehalfWhitelisted(address user, address caller) internal {\\n    require(user != address(0) && caller != address(0), 'USER_OR_CALLER_NOT_ZERO_ADDRESS');\\n    require(_allowClaimOnBehalf[user] == caller, 'CALLER_NOT_ALLOWED_TO_CLAIM_ON_BEHALF');\\n  }\\n\\n  constructor(\\n    IERC20 rewardToken,\\n    IStakedToken psm,\\n    uint256 extraPsmReward,\\n    address emissionManager\\n  ) public AaveDistributionManagerV2(emissionManager) {\\n    REWARD_TOKEN = rewardToken;\\n    PSM = psm;\\n    EXTRA_PSM_REWARD = extraPsmReward;\\n  }\\n\\n  /**\\n   * @dev Initialize AaveIncentivesController\\n   * @param rewardsVault rewards vault to pull funds\\n   * @param distributionDuration unix timestamp of the duration of the distribution\\n   * @param rewardsAdmin address of the admin that controls the rewards vault and extending the distribution\\n   **/\\n  function initialize(\\n    address rewardsVault,\\n    uint256 distributionDuration,\\n    address rewardsAdmin\\n  ) external initializer {\\n    _rewardsVault = rewardsVault;\\n    _extendDistribution(distributionDuration);\\n\\n    uint256[] memory adminsRoles = new uint256[](1);\\n    address[] memory adminsAddresses = new address[](1);\\n\\n    adminsRoles[0] = REWARDS_ADMIN_ROLE;\\n    adminsAddresses[0] = rewardsAdmin;\\n\\n    _initAdmins(adminsRoles, adminsAddresses);\\n\\n    // to unlock possibility to stake on behalf of the user\\n    REWARD_TOKEN.approve(address(PSM), type(uint256).max);\\n  }\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external override {\\n    uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\\n    if (accruedRewards != 0) {\\n      _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user].add(accruedRewards);\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n    DistributionTypes.UserStakeInput[] memory userState =\\n      new DistributionTypes.UserStakeInput[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      userState[i].underlyingAsset = assets[i];\\n      (userState[i].stakedByUser, userState[i].totalStaked) = IAToken(assets[i])\\n        .getScaledUserBalanceAndSupply(user);\\n    }\\n    unclaimedRewards = unclaimedRewards.add(_getUnclaimedRewards(user, userState));\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external override returns (uint256) {\\n    return _claimRewards(assets, amount, msg.sender, to);\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param from Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address from,\\n    address to\\n  ) external override returns (uint256) {\\n    _onBehalfWhitelisted(from, msg.sender);\\n    emit RewardsClaimedOnBehalf(from, msg.sender);\\n    return _claimRewards(assets, amount, from, to);\\n  }\\n\\n  function allowClaimOnBehalf(address user, address caller) external override onlyRewardsAdmin {\\n    _setAllowClaimOnBehalf(user, caller);\\n  }\\n\\n  function _setAllowClaimOnBehalf(address user, address caller) internal {\\n    _allowClaimOnBehalf[user] = caller;\\n  }\\n\\n  function getAllowedToClaimOnBehalf(address user) external view override returns (address) {\\n    return _allowClaimOnBehalf[user];\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards.\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function _claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) internal returns (uint256) {\\n    if (amount == 0) {\\n      return 0;\\n    }\\n    uint256 unclaimedRewards = _usersUnclaimedRewards[user];\\n\\n    DistributionTypes.UserStakeInput[] memory userState =\\n      new DistributionTypes.UserStakeInput[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      userState[i].underlyingAsset = assets[i];\\n      (userState[i].stakedByUser, userState[i].totalStaked) = IAToken(assets[i])\\n        .getScaledUserBalanceAndSupply(user);\\n    }\\n\\n    uint256 accruedRewards = _claimRewards(user, userState);\\n    if (accruedRewards != 0) {\\n      unclaimedRewards = unclaimedRewards.add(accruedRewards);\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    if (unclaimedRewards == 0) {\\n      return 0;\\n    }\\n\\n    uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\\n    _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; // Safe due to the previous line\\n\\n    PSM.stake(to, amountToClaim);\\n    emit RewardsClaimed(user, to, amountToClaim);\\n\\n    return amountToClaim;\\n  }\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param _user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address _user) external view returns (uint256) {\\n    return _usersUnclaimedRewards[_user];\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev update the rewards vault address\\n   * @param rewardsVault The rewards vault address to replace current une\\n   **/\\n  function _setRewardsVault(address rewardsVault) internal {\\n    _rewardsVault = rewardsVault;\\n  }\\n\\n  /**\\n   * @dev returns the current rewards vault contract\\n   * @return address\\n   */\\n  function getRewardsVault() external view returns (address) {\\n    return _rewardsVault;\\n  }\\n\\n  /**\\n   * @dev update the rewards vault address, only allowed by the Rewards admin\\n   * @param rewardsVault The address of the rewards vault\\n   **/\\n  function setRewardsVault(address rewardsVault) external onlyRewardsAdmin {\\n    _setRewardsVault(rewardsVault);\\n  }\\n\\n  /**\\n   * @dev Extends the end of the distribution in regards of current timestamp.\\n   * @param distributionDuration The timestamp duration of the new distribution\\n   **/\\n  function extendDistribution(uint256 distributionDuration) external override onlyRewardsAdmin {\\n    _extendDistribution(distributionDuration);\\n  }\\n}\\n\",\"keccak256\":\"0xf54186c37c0861281d2f08b65f71e8b0ad04012a49bbf740e740ef58564d79d7\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\nimport {\\n  IAaveDistributionManager\\n} from '@aave/aave-stake/contracts/interfaces/IAaveDistributionManager.sol';\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address from,\\n    address to\\n  ) external returns (uint256);\\n\\n  function allowClaimOnBehalf(address user, address caller) external;\\n\\n  function getAllowedToClaimOnBehalf(address user) external view returns (address);\\n\\n  function extendDistribution(uint256 distributionDuration) external;\\n}\\n\",\"keccak256\":\"0xb6f355631d4501fc4bdeea958202a3b95faacd26c12cfb08547383bd63ea38a5\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x610120604052600080553480156200001657600080fd5b50604051620034d3380380620034d383398181016040528101906200003c919062000201565b808060006200005a81426200011c60201b620015651790919060201c565b608081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050816101008181525050505050506200033b565b6000808284019050838110156200019b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600081519050620001b681620002d3565b92915050565b600081519050620001cd81620002ed565b92915050565b600081519050620001e48162000307565b92915050565b600081519050620001fb8162000321565b92915050565b600080600080608085870312156200021857600080fd5b60006200022887828801620001bc565b94505060206200023b87828801620001d3565b93505060406200024e87828801620001ea565b92505060606200026187828801620001a5565b91505092959194509250565b60006200027a82620002a9565b9050919050565b60006200028e826200026d565b9050919050565b6000620002a2826200026d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002de816200026d565b8114620002ea57600080fd5b50565b620002f88162000281565b81146200030457600080fd5b50565b620003128162000295565b81146200031e57600080fd5b50565b6200032c81620002c9565b81146200033857600080fd5b50565b60805160a05160601c60c05160601c60e05160601c610100516131406200039360003980610760525080610b8f528061112e5250806108af528061116a52806118ee525080610d2752806112245250506131406000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806399248ea7116100de578063cc69afec11610097578063e7703a4a11610071578063e7703a4a146104ad578063f11b8188146104c9578063f5bb3e02146104fb578063fde9eb69146105175761018e565b8063cc69afec14610453578063dde43cba14610471578063e23ddec51461048f5761018e565b806399248ea7146103a5578063aaf5eb68146103c3578063ab406fe6146103e1578063b2a5dbfa146103fd578063c350a1b514610419578063cbcbb507146104355761018e565b80634575e69b1161014b5780635dac9ed7116101255780635dac9ed7146103095780636d34b96e146103275780638b599f2614610357578063919cd40f146103875761018e565b80634575e69b1461028d5780634730ab81146102bd5780634bd4b81b146102d95761018e565b8063111fd88b14610193578063198fa81e146101c35780633111e7b3146101f357806331873e2e146102235780633373ee4c1461023f5780633ec3126d1461026f575b600080fd5b6101ad60048036038101906101a89190612ba8565b610533565b6040516101ba9190612dd8565b60405180910390f35b6101dd60048036038101906101d891906128ca565b610570565b6040516101ea9190612f24565b60405180910390f35b61020d60048036038101906102089190612a25565b6105b9565b60405161021a9190612f24565b60405180910390f35b61023d6004803603810190610238919061297e565b6105d2565b005b610259600480360381019061025491906128f3565b6106d4565b6040516102669190612f24565b60405180910390f35b61027761075e565b6040516102849190612f24565b60405180910390f35b6102a760048036038101906102a29190612ba8565b610782565b6040516102b49190612dd8565b60405180910390f35b6102d760048036038101906102d291906128f3565b6107bf565b005b6102f360048036038101906102ee91906128ca565b610844565b6040516103009190612dd8565b60405180910390f35b6103116108ad565b60405161031e9190612e37565b60405180910390f35b610341600480360381019061033c9190612a91565b6108d1565b60405161034e9190612f24565b60405180910390f35b610371600480360381019061036c91906129cd565b61094f565b60405161037e9190612f24565b60405180910390f35b61038f610b7e565b60405161039c9190612f24565b60405180910390f35b6103ad610b8d565b6040516103ba9190612e1c565b60405180910390f35b6103cb610bb1565b6040516103d89190612f68565b60405180910390f35b6103fb60048036038101906103f69190612bd1565b610bb6565b005b61041760048036038101906104129190612b11565b610d25565b005b610433600480360381019061042e919061292f565b610f70565b005b61043d611222565b60405161044a9190612dd8565b60405180910390f35b61045b611246565b6040516104689190612f24565b60405180910390f35b610479611255565b6040516104869190612f24565b60405180910390f35b61049761125a565b6040516104a49190612dd8565b60405180910390f35b6104c760048036038101906104c29190612ba8565b611284565b005b6104e360048036038101906104de91906128ca565b611307565b6040516104f293929190612eed565b60405180910390f35b610515600480360381019061051091906128ca565b611369565b005b610531600480360381019061052c9190612ba8565b6113ec565b005b60006035600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000603860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006105c885858533866115ed565b9050949350505050565b60006105e0843384866119ef565b9050600081146106ce5761063c81603860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461156590919063ffffffff16565b603860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76826040516106c59190612f24565b60405180910390a25b50505050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006036600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6107c96004610533565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90612e92565b60405180910390fd5b6108408282611b61565b5050565b6000603960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108dd8333611be3565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f381ae7ccedd06e81973aa95c87cc179b7c42b567a82e4870789c7a2117d035ba60405160405180910390a361094486868686866115ed565b905095945050505050565b600080603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060608585905067ffffffffffffffff811180156109b057600080fd5b506040519080825280602002602001820160405280156109ea57816020015b6109d7612796565b8152602001906001900390816109cf5790505b50905060005b86869050811015610b5357868682818110610a0757fe5b9050602002016020810190610a1c91906128ca565b828281518110610a2857fe5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868682818110610a7257fe5b9050602002016020810190610a8791906128ca565b73ffffffffffffffffffffffffffffffffffffffff16630afbcdc9866040518263ffffffff1660e01b8152600401610abf9190612dd8565b604080518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190612c0d565b838381518110610b1a57fe5b6020026020010151602001848481518110610b3157fe5b60200260200101516040018281525082815250505080806001019150506109f0565b50610b70610b618583611d5d565b8361156590919063ffffffff16565b915081925050509392505050565b6000610b88611ed8565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b813373ffffffffffffffffffffffffffffffffffffffff166035600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f43414c4c45525f4e4f545f524f4c455f41444d494e000000000000000000000081525060200191505060405180910390fd5b816036600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f8a3466f9d131f979249b9ebf68c3232124fbcda6334435f53e6788663f05387a60405160405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daa90612eb2565b60405180910390fd5b60005b82829050811015610f6b57600060336000858585818110610dd357fe5b9050606002016040016020810190610deb91906128ca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610e6a848484818110610e3657fe5b9050606002016040016020810190610e4e91906128ca565b82868686818110610e5b57fe5b90506060020160200135611ee2565b50838383818110610e7757fe5b9050606002016000016020810190610e8f9190612b7f565b8160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550838383818110610ed557fe5b9050606002016040016020810190610eed91906128ca565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa858585818110610f3057fe5b9050606002016000016020810190610f489190612b7f565b604051610f559190612ed2565b60405180910390a2508080600101915050610db6565b505050565b6000610f7a61201f565b90506000548111610fd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806130dd602e913960400191505060405180910390fd5b8060008190555083603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061102783612028565b6060600167ffffffffffffffff8111801561104157600080fd5b506040519080825280602002602001820160405280156110705781602001602082028036833780820191505090505b5090506060600167ffffffffffffffff8111801561108d57600080fd5b506040519080825280602002602001820160405280156110bc5781602001602082028036833780820191505090505b5090506004826000815181106110ce57fe5b60200260200101818152505083816000815181106110e857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061112c828261207f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016111c7929190612df3565b602060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190612b56565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611250611ed8565b905090565b600181565b6000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61128e6004610533565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f290612e92565b60405180910390fd5b61130481612028565b50565b60336020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010154905083565b6113736004610533565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d790612e92565b60405180910390fd5b6113e9816122d5565b50565b803373ffffffffffffffffffffffffffffffffffffffff166036600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43414c4c45525f4e4f545f50454e44494e475f524f4c455f41444d494e00000081525060200191505060405180910390fd5b336035600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f83a9ddad961dcb7c6894c9585a16ff7792c2ec8281256a3cc7303ae830152dcf836040518082815260200191505060405180910390a25050565b6000808284019050838110156115e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008084141561160057600090506119e6565b6000603860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060608787905067ffffffffffffffff8111801561166057600080fd5b5060405190808252806020026020018201604052801561169a57816020015b611687612796565b81526020019060019003908161167f5790505b50905060005b88889050811015611803578888828181106116b757fe5b90506020020160208101906116cc91906128ca565b8282815181106116d857fe5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505088888281811061172257fe5b905060200201602081019061173791906128ca565b73ffffffffffffffffffffffffffffffffffffffff16630afbcdc9876040518263ffffffff1660e01b815260040161176f9190612dd8565b604080518083038186803b15801561178657600080fd5b505afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be9190612c0d565b8383815181106117ca57fe5b60200260200101516020018484815181106117e157fe5b60200260200101516040018281525082815250505080806001019150506116a0565b5060006118108683612319565b90506000811461187e5761182d818461156590919063ffffffff16565b92508573ffffffffffffffffffffffffffffffffffffffff167f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76826040516118759190612f24565b60405180910390a25b600083141561189357600093505050506119e6565b60008388116118a257876118a4565b835b9050808403603860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663adc9772e87836040518363ffffffff1660e01b8152600401611947929190612df3565b600060405180830381600087803b15801561196157600080fd5b505af1158015611975573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c7836040516119d69190612f24565b60405180910390a3809450505050505b95945050505050565b600080603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080611a87888588611ee2565b9050808314611b525760008714611aa657611aa38782856123a9565b91505b808460020160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b83604051611b499190612f24565b60405180910390a35b81945050505050949350505050565b80603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611c4d5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390612e72565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5090612e52565b60405180910390fd5b5050565b6000806000905060005b8351811015611ecd57600060336000868481518110611d8257fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000611e4582600101548360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460000160109054906101000a90046fffffffffffffffffffffffffffffffff16898781518110611e3457fe5b6020026020010151604001516123f2565b9050611ebc611ead878581518110611e5957fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123a9565b8561156590919063ffffffff16565b935050508080600101915050611d67565b508091505092915050565b6000603454905090565b6000808360010154905060008460000160109054906101000a90046fffffffffffffffffffffffffffffffff169050806fffffffffffffffffffffffffffffffff16421415611f35578192505050612018565b6000611f75838760000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1684886123f2565b9050828114611fd6578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc82604051611fcd9190612f24565b60405180910390a25b428660000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508093505050505b9392505050565b60006001905090565b61203b814261156590919063ffffffff16565b6034819055507f24a396d37e97ed66b0941657afe06ae684417b15a1e354e5275c09d0d1ec4e0e60345482604051612074929190612f3f565b60405180910390a150565b80518251146120f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f494e434f4e53495354454e545f494e495449414c495a4154494f4e000000000081525060200191505060405180910390fd5b60005b82518110156122d057600073ffffffffffffffffffffffffffffffffffffffff166035600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f41444d494e5f414c52454144595f494e495449414c495a45440000000000000081525060200191505060405180910390fd5b8181815181106121e357fe5b6020026020010151603560008584815181106121fb57fe5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081818151811061225b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f83a9ddad961dcb7c6894c9585a16ff7792c2ec8281256a3cc7303ae830152dcf8483815181106122a657fe5b60200260200101516040518082815260200191505060405180910390a280806001019150506120f9565b505050565b80603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000905060005b835181101561239e5761238f6123808686848151811061233f57fe5b60200260200101516000015187858151811061235757fe5b60200260200101516020015188868151811061236f57fe5b6020026020010151604001516119ef565b8361156590919063ffffffff16565b91508080600101915050612323565b508091505092915050565b60006123e9601260ff16600a0a6123db6123cc85876124f690919063ffffffff16565b8761254090919063ffffffff16565b6125c690919063ffffffff16565b90509392505050565b6000808414806124025750600082145b8061241e575042836fffffffffffffffffffffffffffffffff16145b80612442575061242c611ed8565b836fffffffffffffffffffffffffffffffff1610155b1561244f578490506124ee565b6000612459611ed8565b4211612465574261246e565b61246d611ed8565b5b90506000612497856fffffffffffffffffffffffffffffffff16836124f690919063ffffffff16565b90506124e9876124db866124cd601260ff16600a0a6124bf878d61254090919063ffffffff16565b61254090919063ffffffff16565b6125c690919063ffffffff16565b61156590919063ffffffff16565b925050505b949350505050565b600061253883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612610565b905092915050565b60008083141561255357600090506125c0565b600082840290508284828161256457fe5b04146125bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806130bc6021913960400191505060405180910390fd5b809150505b92915050565b600061260883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506126d0565b905092915050565b60008383111582906126bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612682578082015181840152602081019050612667565b50505050905090810190601f1680156126af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808311829061277c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612741578082015181840152602081019050612726565b50505050905090810190601f16801561276e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161278857fe5b049050809150509392505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000813590506127dc8161305f565b92915050565b60008083601f8401126127f457600080fd5b8235905067ffffffffffffffff81111561280d57600080fd5b60208301915083602082028301111561282557600080fd5b9250929050565b60008083601f84011261283e57600080fd5b8235905067ffffffffffffffff81111561285757600080fd5b60208301915083606082028301111561286f57600080fd5b9250929050565b60008151905061288581613076565b92915050565b60008135905061289a8161308d565b92915050565b6000813590506128af816130a4565b92915050565b6000815190506128c4816130a4565b92915050565b6000602082840312156128dc57600080fd5b60006128ea848285016127cd565b91505092915050565b6000806040838503121561290657600080fd5b6000612914858286016127cd565b9250506020612925858286016127cd565b9150509250929050565b60008060006060848603121561294457600080fd5b6000612952868287016127cd565b9350506020612963868287016128a0565b9250506040612974868287016127cd565b9150509250925092565b60008060006060848603121561299357600080fd5b60006129a1868287016127cd565b93505060206129b2868287016128a0565b92505060406129c3868287016128a0565b9150509250925092565b6000806000604084860312156129e257600080fd5b600084013567ffffffffffffffff8111156129fc57600080fd5b612a08868287016127e2565b93509350506020612a1b868287016127cd565b9150509250925092565b60008060008060608587031215612a3b57600080fd5b600085013567ffffffffffffffff811115612a5557600080fd5b612a61878288016127e2565b94509450506020612a74878288016128a0565b9250506040612a85878288016127cd565b91505092959194509250565b600080600080600060808688031215612aa957600080fd5b600086013567ffffffffffffffff811115612ac357600080fd5b612acf888289016127e2565b95509550506020612ae2888289016128a0565b9350506040612af3888289016127cd565b9250506060612b04888289016127cd565b9150509295509295909350565b60008060208385031215612b2457600080fd5b600083013567ffffffffffffffff811115612b3e57600080fd5b612b4a8582860161282c565b92509250509250929050565b600060208284031215612b6857600080fd5b6000612b7684828501612876565b91505092915050565b600060208284031215612b9157600080fd5b6000612b9f8482850161288b565b91505092915050565b600060208284031215612bba57600080fd5b6000612bc8848285016128a0565b91505092915050565b60008060408385031215612be457600080fd5b6000612bf2858286016128a0565b9250506020612c03858286016127cd565b9150509250929050565b60008060408385031215612c2057600080fd5b6000612c2e858286016128b5565b9250506020612c3f858286016128b5565b9150509250929050565b612c5281612f94565b82525050565b612c6181613005565b82525050565b612c7081613029565b82525050565b6000612c83602583612f83565b91507f43414c4c45525f4e4f545f414c4c4f5745445f544f5f434c41494d5f4f4e5f4260008301527f4548414c460000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ce9601f83612f83565b91507f555345525f4f525f43414c4c45525f4e4f545f5a45524f5f41444452455353006000830152602082019050919050565b6000612d29601883612f83565b91507f43414c4c45525f4e4f545f524557415244535f41444d494e00000000000000006000830152602082019050919050565b6000612d69601583612f83565b91507f4f4e4c595f454d495353494f4e5f4d414e4147455200000000000000000000006000830152602082019050919050565b612da581612fb2565b82525050565b612db48161304d565b82525050565b612dc381612fee565b82525050565b612dd281612ff8565b82525050565b6000602082019050612ded6000830184612c49565b92915050565b6000604082019050612e086000830185612c49565b612e156020830184612dba565b9392505050565b6000602082019050612e316000830184612c58565b92915050565b6000602082019050612e4c6000830184612c67565b92915050565b60006020820190508181036000830152612e6b81612c76565b9050919050565b60006020820190508181036000830152612e8b81612cdc565b9050919050565b60006020820190508181036000830152612eab81612d1c565b9050919050565b60006020820190508181036000830152612ecb81612d5c565b9050919050565b6000602082019050612ee76000830184612dab565b92915050565b6000606082019050612f026000830186612d9c565b612f0f6020830185612d9c565b612f1c6040830184612dba565b949350505050565b6000602082019050612f396000830184612dba565b92915050565b6000604082019050612f546000830185612dba565b612f616020830184612dba565b9392505050565b6000602082019050612f7d6000830184612dc9565b92915050565b600082825260208201905092915050565b6000612f9f82612fce565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061301082613017565b9050919050565b600061302282612fce565b9050919050565b60006130348261303b565b9050919050565b600061304682612fce565b9050919050565b600061305882612fb2565b9050919050565b61306881612f94565b811461307357600080fd5b50565b61307f81612fa6565b811461308a57600080fd5b50565b61309681612fb2565b81146130a157600080fd5b50565b6130ad81612fee565b81146130b857600080fd5b5056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a264697066735822122057285020aa2c28bd0873440a379e393b657e8a936aa3d42e552835c7af70dfa364736f6c63430007050033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Aave*",
    "kind": "dev",
    "methods": {
      "DISTRIBUTION_END()": {
        "details": "Keeps interface compatibility. Returns the timestamp of the end of the current distribution",
        "returns": {
          "_0": "uint256 unix timestamp*"
        }
      },
      "claimRewards(address[],uint256,address)": {
        "details": "Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards",
        "params": {
          "amount": "Amount of rewards to claim",
          "to": "Address that will be receiving the rewards"
        },
        "returns": {
          "_0": "Rewards claimed*"
        }
      },
      "claimRewardsOnBehalf(address[],uint256,address,address)": {
        "details": "Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "amount": "Amount of rewards to claim",
          "from": "Address to check and claim rewards",
          "to": "Address that will be receiving the rewards"
        },
        "returns": {
          "_0": "Rewards claimed*"
        }
      },
      "claimRoleAdmin(uint256)": {
        "details": "allows the caller to become a specific role admin",
        "params": {
          "role": "the role associated with the admin claiming the new role*"
        }
      },
      "configureAssets((uint128,uint256,address)[])": {
        "details": "Configures the distribution of rewards for a list of assets",
        "params": {
          "assetsConfigInput": "The list of configurations to apply*"
        }
      },
      "extendDistribution(uint256)": {
        "details": "Extends the end of the distribution in regards of current timestamp.",
        "params": {
          "distributionDuration": "The timestamp duration of the new distribution*"
        }
      },
      "getAdmin(uint256)": {
        "details": "returns the admin associated with the specific role",
        "params": {
          "role": "the role associated with the admin being returned*"
        }
      },
      "getDistributionEnd()": {
        "details": "Returns the timestamp of the end of the current distribution",
        "returns": {
          "_0": "uint256 unix timestamp*"
        }
      },
      "getPendingAdmin(uint256)": {
        "details": "returns the pending admin associated with the specific role",
        "params": {
          "role": "the role associated with the pending admin being returned*"
        }
      },
      "getRewardsBalance(address[],address)": {
        "details": "Returns the total of rewards of an user, already accrued + not yet accrued",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The rewards*"
        }
      },
      "getRewardsVault()": {
        "details": "returns the current rewards vault contract",
        "returns": {
          "_0": "address"
        }
      },
      "getUserAssetData(address,address)": {
        "details": "Returns the data of an user on a distribution",
        "params": {
          "asset": "The address of the reference asset of the distribution",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The new index*"
        }
      },
      "getUserUnclaimedRewards(address)": {
        "details": "returns the unclaimed rewards of the user",
        "params": {
          "_user": "the address of the user"
        },
        "returns": {
          "_0": "the unclaimed user rewards"
        }
      },
      "handleAction(address,uint256,uint256)": {
        "details": "Called by the corresponding asset on any update that affects the rewards distribution",
        "params": {
          "totalSupply": "The total supply of the asset in the lending pool",
          "user": "The address of the user",
          "userBalance": "The balance of the user of the asset in the lending pool*"
        }
      },
      "initialize(address,uint256,address)": {
        "details": "Initialize AaveIncentivesController",
        "params": {
          "distributionDuration": "unix timestamp of the duration of the distribution",
          "rewardsAdmin": "address of the admin that controls the rewards vault and extending the distribution*",
          "rewardsVault": "rewards vault to pull funds"
        }
      },
      "setPendingAdmin(uint256,address)": {
        "details": "sets the pending admin for a specific role",
        "params": {
          "newPendingAdmin": "the address of the new pending admin*",
          "role": "the role associated with the new pending admin being set"
        }
      },
      "setRewardsVault(address)": {
        "details": "update the rewards vault address, only allowed by the Rewards admin",
        "params": {
          "rewardsVault": "The address of the rewards vault*"
        }
      }
    },
    "title": "AaveIncentivesController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Distributor contract for rewards to the Aave protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1696,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1727,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 909,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(AssetData)898_storage)"
      },
      {
        "astId": 1444,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_distributionEnd",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 1508,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_admins",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1512,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_pendingAdmins",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2293,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_rewardsVault",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 2299,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_usersUnclaimedRewards",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2306,
        "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
        "label": "_allowClaimOnBehalf",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AssetData)898_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AaveDistributionManager.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)898_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AssetData)898_storage": {
        "encoding": "inplace",
        "label": "struct AaveDistributionManager.AssetData",
        "members": [
          {
            "astId": 889,
            "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
            "label": "emissionPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 891,
            "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
            "label": "lastUpdateTimestamp",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 893,
            "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/incentives/AaveIncentivesController.sol:AaveIncentivesController",
            "label": "users",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}